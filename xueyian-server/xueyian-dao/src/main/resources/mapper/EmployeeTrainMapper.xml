<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.cuit.xueyian.dao.EmployeetrainMapper">
  <resultMap id="BaseResultMap" type="org.cuit.xueyian.model.EmployeeTrain">
    <!--@mbg.generated-->
    <!--@Table employeetrain-->
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="eid" jdbcType="INTEGER" property="eid" />
    <result column="remark" jdbcType="VARCHAR" property="remark" />
    <result column="departId" jdbcType="INTEGER" property="departId" />
    <result column="trainId" jdbcType="INTEGER" property="trainId" />
  </resultMap>
  <resultMap id="Employee" type="org.cuit.xueyian.model.Employee" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="gender" property="gender" jdbcType="CHAR" />
    <result column="birthday" property="birthday" jdbcType="DATE" />
    <result column="idCard" property="idcard" jdbcType="CHAR" />
    <result column="wedlock" property="wedlock" jdbcType="CHAR" />
    <result column="nationId" property="nationid" jdbcType="INTEGER" />
    <result column="nativePlace" property="nativeplace" jdbcType="VARCHAR" />
    <result column="politicId" property="politicid" jdbcType="INTEGER" />
    <result column="email" property="email" jdbcType="VARCHAR" />
    <result column="phone" property="phone" jdbcType="VARCHAR" />
    <result column="address" property="address" jdbcType="VARCHAR" />
    <result column="departmentId" property="departmentid" jdbcType="INTEGER" />
    <result column="jobLevelId" property="joblevelid" jdbcType="INTEGER" />
    <result column="posId" property="posid" jdbcType="INTEGER" />
    <result column="engageForm" property="engageform" jdbcType="VARCHAR" />
    <result column="tiptopDegree" property="tiptopdegree" jdbcType="CHAR" />
    <result column="specialty" property="specialty" jdbcType="VARCHAR" />
    <result column="school" property="school" jdbcType="VARCHAR" />
    <result column="beginDate" property="begindate" jdbcType="DATE" />
    <result column="workState" property="workstate" jdbcType="CHAR" />
    <result column="workID" property="workid" jdbcType="CHAR" />
    <result column="contractTerm" property="contractterm" jdbcType="DOUBLE" />
    <result column="conversionTime" property="conversiontime" jdbcType="DATE" />
    <result column="notWorkDate" property="notworkdate" jdbcType="DATE" />
    <result column="beginContract" property="begincontract" jdbcType="DATE" />
    <result column="endContract" property="endcontract" jdbcType="DATE" />
    <result column="workAge" property="workage" jdbcType="INTEGER" />
  </resultMap>
  <resultMap id="TrainInfo" type="org.cuit.xueyian.model.TrainInfo">
    <result column="id" jdbcType="INTEGER" property="id" />
    <result column="eid" jdbcType="INTEGER" property="eid" />
    <result column="remark" jdbcType="VARCHAR" property="remark" />
    <result column="departId" jdbcType="INTEGER" property="departId" />
    <result column="empName" jdbcType="VARCHAR" property="empName"/>
    <result column="departName" jdbcType="VARCHAR" property="departName"/>

    <result column="trainId" jdbcType="INTEGER" property="trainId" />
    <result column="trainName" jdbcType="VARCHAR" property="trainName"/>
    <result column="content" jdbcType="VARCHAR" property="content"/>
    <result column="beginDate" jdbcType="DATE" property="beginDate"/>
    <result column="endDate" jdbcType="DATE" property="endDate"/>
  </resultMap>
  <sql id="Base_Column_List">
    <!--@mbg.generated-->
    id, eid, remark, departId, trainId
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    <!--@mbg.generated-->
    select 
    <include refid="Base_Column_List" />
    from employeetrain
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    <!--@mbg.generated-->
    delete from employeetrain
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" keyColumn="id" keyProperty="id" parameterType="org.cuit.xueyian.model.EmployeeTrain" useGeneratedKeys="true">
    <!--@mbg.generated-->
    insert into employeetrain (eid, remark, departId, 
      trainId)
    values (#{eid,jdbcType=CHAR}, #{remark,jdbcType=VARCHAR}, #{departId,jdbcType=INTEGER}, 
      #{trainId,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="org.cuit.xueyian.model.EmployeeTrain" useGeneratedKeys="true">
    <!--@mbg.generated-->
    insert into employeetrain
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="eid != null">
        eid,
      </if>
      <if test="remark != null">
        remark,
      </if>
      <if test="departId != null">
        departId,
      </if>
      <if test="trainId != null">
        trainId,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="eid != null">
        #{eid,jdbcType=CHAR},
      </if>
      <if test="remark != null">
        #{remark,jdbcType=VARCHAR},
      </if>
      <if test="departId != null">
        #{departId,jdbcType=INTEGER},
      </if>
      <if test="trainId != null">
        #{trainId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="org.cuit.xueyian.model.EmployeeTrain">
    <!--@mbg.generated-->
    update employeetrain
    <set>
      <if test="eid != null">
        eid = #{eid,jdbcType=CHAR},
      </if>
      <if test="remark != null">
        remark = #{remark,jdbcType=VARCHAR},
      </if>
      <if test="departId != null">
        departId = #{departId,jdbcType=INTEGER},
      </if>
      <if test="trainId != null">
        trainId = #{trainId,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="org.cuit.xueyian.model.EmployeeTrain">
    <!--@mbg.generated-->
    update employeetrain
    set eid = #{eid,jdbcType=CHAR},
      remark = #{remark,jdbcType=VARCHAR},
      departId = #{departId,jdbcType=INTEGER},
      trainId = #{trainId,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <!-- 查询指定id部门下有哪些培训 -->
  <select id="getTrainListByDepartId" resultType="org.cuit.xueyian.model.Train" parameterType="java.util.HashMap">
    select distinct train.*
    from train, employeetrain
    where
      train.id = employeetrain.trainId
      and employeetrain.departId = #{departId}
    limit #{pageSize} offset #{offsetData}
  </select>

  <!-- 查询指定id员工参加了哪些培训 -->
  <select id="getEmpTrainInfoListByEid" resultMap="TrainInfo" parameterType="java.util.HashMap">
    select
      employee.id as eid,
      employee.`name` as empName,
      employeetrain.remark as remark,
      employeetrain.id as id,
      department.id as departId,
      department.`name` as departName,
      train.id as trainId,
      train.name as trainName,
      train.content as content,
      train.beginDate as beginDate,
      train.endDate as endDate
    from train, employee, employeetrain, department
    where
      train.id = employeetrain.trainId
      and employee.workID = employeetrain.eid
      and department.id = employeetrain.departId
      and employeetrain.eid = #{eid}
    limit #{pageSize} offset #{offsetData}
  </select>

  <!-- 查询指定id部门下员工参加培训的情况 -->
  <select id="getEmployeeTrainListByDepartId" parameterType="java.util.HashMap" resultMap="TrainInfo">
    select
      employee.id as eid,
      employee.`name` as empName,
      employeetrain.remark as remark,
      employeetrain.id as id,
      department.id as departId,
      department.`name` as departName,
      train.id as trainId,
      train.name as trainName,
      train.content as content,
      train.beginDate as beginDate,
      train.endDate as endDate
    from train, employee, employeetrain, department
    where train.id = employeetrain.trainId
      and employee.workID = employeetrain.eid
      and department.id = employeetrain.departId
      and employeetrain.departId = #{departId}
    limit #{pageSize} offset #{offsetData}
  </select>

  <!-- 查询公司员工参加培训的情况 -->
  <select id="getEmployeeTrainList" resultMap="TrainInfo" parameterType="java.util.HashMap">
    select
      employee.id as eid,
      employee.`name` as empName,
      employeetrain.remark as remark,
      employeetrain.id as id,
      department.id as departId,
      department.`name` as departName,
      train.id as trainId,
      train.name as trainName,
      train.content as content,
      train.beginDate as beginDate,
      train.endDate as endDate
    from train, employee, employeetrain, department
    where train.id = employeetrain.trainId
      and employee.workID = employeetrain.eid
      and department.id = employeetrain.departId
    limit #{pageSize} offset #{offsetData}
  </select>
  <!-- 查询某个培训有哪些员工参加 -->
  <select id="getTrainInfoListByTrainId" resultMap="TrainInfo" parameterType="java.util.HashMap">
    select
      employee.id as eid,
      employee.`name` as empName,
      employeetrain.remark as remark,
      employeetrain.id as id,
      department.id as departId,
      department.`name` as departName,
      train.id as trainId,
      train.`name` as trainName,
      train.content as content,
      train.beginDate as beginDate,
      train.endDate as endDate
    from train, employee, employeetrain, department
    where train.id = employeetrain.trainId
      and employee.workID = employeetrain.eid
      and department.id = employeetrain.departId
      and employeetrain.trainId = #{trainId}
      limit #{pageSize} offset #{offsetData}
  </select>

  <!-- 通过培训id删除记录 -->
  <delete id="deleteByTrainId" parameterType="java.lang.Integer">
    delete from employeetrain where trainId = #{trainId}
  </delete>
<!-- 根据实体查询该条件下的记录数 -->
  <select id="countRowByEntity" parameterType="org.cuit.xueyian.model.EmployeeTrain" resultType="java.lang.Integer">
    select count(id) as nums from employeetrain
    <where>
      <if test="trainId != null and trainId != ''">
        and trainId =  #{trainId, jdbcType=INTEGER}
      </if>
      <if test="eid != null and eid != ''">
        and eid = #{eid, jdbcType=INTEGER}
      </if>
      <if test="departId != null and departId != ''">
        and departId = #{departId, jdbcType=INTEGER}
      </if>
    </where>
  </select>

  <select id="getTrainInfoByEntity" parameterType="java.util.HashMap" resultMap="TrainInfo">
    select
      employee.id as eid,
      employee.`name` as empName,
      employeetrain.remark as remark,
      employeetrain.id as id,
      department.id as departId,
      department.`name` as departName,
      train.id as trainId,
      train.name as trainName,
      train.content as content,
      train.beginDate as beginDate,
      train.endDate as endDate
    from train, employee, employeetrain, department
    where train.id = employeetrain.trainId
    and employee.workID = employeetrain.eid
    and department.id = employeetrain.departId
    <if test="trainId != null and trainId != ''">
      and trainId =  #{trainId, jdbcType=INTEGER}
    </if>
    <if test="eid != null and eid != ''">
      and eid = #{eid, jdbcType=INTEGER}
    </if>
    <if test="departId != null and departId != ''">
      and departId = #{departId, jdbcType=INTEGER}
    </if>
    limit #{pageSize} offset #{offsetData}
  </select>
  <!--暂时不用-->
  <!-- 查询有哪些部门存在培训 -->
  <select id="getDepartmentList" parameterType="java.util.HashMap" resultMap="BaseResultMap">
    select <include refid="Base_Column_List" /> from employeetrain group by departId
    limit #{pageSize} offset #{offsetData}
  </select>
  <!--暂时不用-->
  <!-- 查询指定id部门下有哪些员工参加了培训 -->
  <select id="getEmployeeListByDepartId" resultType="java.lang.Integer" parameterType="java.util.HashMap">
    select distinct eid from employeetrain where departId = #{departId}
    limit #{pageSize} offset #{offsetData}
  </select>

  <select id="getTrainInfoById" resultMap="TrainInfo" parameterType="java.lang.Integer">
    select
      employee.id as eid,
      employee.`name` as empName,
      employeetrain.remark as remark,
      employeetrain.id as id,
      department.id as departId,
      department.`name` as departName,
      train.id as trainId,
      train.name as trainName,
      train.content as content,
      train.beginDate as beginDate,
      train.endDate as endDate
    from train, employee, employeetrain, department
    where train.id = employeetrain.trainId
      and employee.workID = employeetrain.eid
      and department.id = employeetrain.departId
      and employeetrain.id = #{id}
  </select>

  <select id="getEmployeeList" resultMap="Employee">
    select name, id, workID, departmentId from employee ;
  </select>
</mapper>